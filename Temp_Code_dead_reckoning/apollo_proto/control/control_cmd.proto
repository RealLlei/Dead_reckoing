syntax = "proto2";
package apollo.control;

import "apollo_proto/canbus/chassis.proto";
import "apollo_proto/common/drive_state.proto";
import "apollo_proto/common/header.proto";
import "apollo_proto/common/pnc_point.proto";
import "apollo_proto/common/vehicle_signal.proto";
import "apollo_proto/control/input_debug.proto";
import "apollo_proto/control/pad_msg.proto";
import "apollo_proto/control/mbd_control_debug.proto";

enum TurnSignal {
  TURN_NONE = 0;
  TURN_LEFT = 1;
  TURN_RIGHT = 2;
}

enum LonCtrlLoop {
  LON_IDLE = 0;
  LON_ANALOG = 1;
  LON_THRUST = 2;
  LON_VEL = 3;
  LON_POS = 4;
}

enum LatCtrlLoop {
  LAT_IDLE = 0;
  LAT_STEER = 1;
  LAT_RATE = 2;
  LAT_YAW = 3;
  LAT_OFFSET = 4;
}

enum CtrlReqMode {
  CTRL_IDLE = 0;
  ADAS_LATCTRL = 1;
  ADAS_LONCTRL = 2;
  ADAS_AUTO = 3;
  NNP_LATCTRL = 4;
  NNP_LONCTRL = 5;
  NNP_AUTO =  6;
  AVP_LATCTRL = 7;
  AVP_LONCTRL = 8;
  AVP_AUTO = 9;
}

message LatencyStats {
  optional double total_time_ms = 1;
  repeated double controller_time_ms = 2;
  optional bool total_time_exceeded = 3;
}

// next id : 27
message ControlCommand {
  optional apollo.common.Header header = 1;
  // control request mode for crusing or parking handshake
  optional CtrlReqMode ctrl_req_mode = 33;

  // target throttle in percentage [0, 100]
  optional double throttle = 3;

  // target brake in percentage [0, 100]
  optional double brake = 4;

  // target non-directional steering rate, in percentage of full scale per
  // second [0, 100]
  optional double steering_rate = 6;

  // target steering angle, in percentage of full scale [-100, 100]
  optional double steering_target = 7;

  // parking brake engage. true: engaged
  optional bool parking_brake = 8;

  // target speed, in m/s
  optional double speed = 9;

  // target acceleration in m`s^-2
  optional double acceleration = 10;

  // model reset
  optional bool reset_model = 16 [ deprecated = true ];
  // engine on/off, true: engine on
  optional bool engine_on_off = 17;
  // completion percentage of trajectory planned in last cycle
  optional double trajectory_fraction = 18;
  optional apollo.canbus.Chassis.DrivingMode driving_mode = 19
      [ deprecated = true ];
  optional apollo.canbus.Chassis.GearPosition gear_location = 20;

  optional Debug debug = 22;
  optional apollo.common.VehicleSignal signal = 23;
  optional LatencyStats latency_stats = 24;
  optional PadMessage pad_msg = 25;
  optional apollo.common.EngageAdvice engage_advice = 26;
  optional bool is_in_safe_mode = 27 [ default = false ];

  optional double torque = 28 [ default = 0 ];
  optional double steering_angle_rate = 29 [ default = 0 ];
  optional double steering_angle = 30 [ default = 0 ];
  optional double steering_torque = 31 [ default = 0 ];

  // deprecated fields
  optional bool left_turn = 13 [ deprecated = true ];
  optional bool right_turn = 14 [ deprecated = true ];
  optional bool high_beam = 11 [ deprecated = true ];
  optional bool low_beam = 12 [ deprecated = true ];
  optional bool horn = 15 [ deprecated = true ];
  optional TurnSignal turnsignal = 21 [ deprecated = true ];
  // optional MbdDebug mbd_debug = 32;
  optional MbdDebugFromMCU mbd_debug = 32;
}

message SimpleLongitudinalDebug {
  optional double station_reference = 1;
  optional double station_error = 2;
  optional double station_error_limited = 3;
  optional double preview_station_error = 4;
  optional double speed_reference = 5;
  optional double speed_error = 6;
  optional double speed_controller_input_limited = 7;
  optional double preview_speed_reference = 8;
  optional double preview_speed_error = 9;
  optional double preview_acceleration_reference = 10;
  optional double acceleration_cmd_closeloop = 11;
  optional double acceleration_cmd = 12;
  optional double acceleration_lookup = 13;
  optional double speed_lookup = 14;
  optional double calibration_value = 15;
  optional double throttle_cmd = 16;
  optional double brake_cmd = 17;
  optional bool is_full_stop = 18;
  optional double slope_offset_compensation = 19;
  optional double current_station = 20;
  optional double path_remain = 21;
  optional int32 pid_saturation_status = 22;
  optional int32 leadlag_saturation_status = 23;
  optional double speed_offset = 24;
  optional double current_speed = 25;
  optional double acceleration_reference = 26;
  optional double current_acceleration = 27;
  optional double acceleration_error = 28;
  optional double jerk_reference = 29;
  optional double current_jerk = 30;
  optional double jerk_error = 31;
  optional apollo.common.TrajectoryPoint current_matched_point = 32;
  optional apollo.common.TrajectoryPoint current_reference_point = 33;
  optional apollo.common.TrajectoryPoint preview_reference_point = 34;
  optional double temp_01 = 35;
  optional double temp_02 = 36;
  optional double temp_03 = 37;
  optional double temp_04 = 38;
  optional double temp_05 = 39;
  optional double temp_06 = 40;
  optional double temp_07 = 41;
  optional double temp_08 = 42;
  optional double temp_09 = 43;
  optional double temp_10 = 44;
  optional double temp_11 = 45;
  optional double temp_12 = 46;
  optional double temp_13 = 47;
  optional double temp_14 = 48;
  optional double temp_15 = 49;
  optional double temp_16 = 50;
  optional double temp_17 = 51;
  optional double temp_18 = 52;
  optional double temp_19 = 53;
  optional double temp_20 = 54;
}

message SimpleLateralDebug {
  optional double lateral_error = 1;
  optional double ref_heading = 2;
  optional double heading = 3;
  optional double heading_error = 4;
  optional double heading_error_rate = 5;
  optional double lateral_error_rate = 6;
  optional double curvature = 7;
  optional double steer_angle = 8;
  optional double steer_angle_feedforward = 9;
  optional double steer_angle_lateral_contribution = 10;
  optional double steer_angle_lateral_rate_contribution = 11;
  optional double steer_angle_heading_contribution = 12;
  optional double steer_angle_heading_rate_contribution = 13;
  optional double steer_angle_feedback = 14;
  optional double steering_position = 15;
  optional double ref_speed = 16;
  optional double steer_angle_limited = 17;

  // time derivative of lateral error rate, in m/s^2
  optional double lateral_acceleration = 18;
  // second time derivative of lateral error rate, in m/s^3
  optional double lateral_jerk = 19;

  optional double ref_heading_rate = 20;
  optional double heading_rate = 21;

  // heading_acceleration, as known as yaw acceleration, is the time derivative
  // of heading rate,  in rad/s^2
  optional double ref_heading_acceleration = 22;
  optional double heading_acceleration = 23;
  optional double heading_error_acceleration = 24;

  // heading_jerk, as known as yaw jerk, is the second time derivative of
  // heading rate, in rad/s^3
  optional double ref_heading_jerk = 25;
  optional double heading_jerk = 26;
  optional double heading_error_jerk = 27;

  // modified lateral_error and heading_error with look-ahead or look-back
  // station, as the feedback term for control usage
  optional double lateral_error_feedback = 28;
  optional double heading_error_feedback = 29;

  // current planning target point
  optional apollo.common.TrajectoryPoint current_target_point = 30;

  // Augmented feedback control term in addition to LQR control
  optional double steer_angle_feedback_augment = 31;

  // Mrac control status and feedback states for steer control
  optional MracDebug steer_mrac_debug = 32;
  optional bool steer_mrac_enable_status = 33;
  optional double steer_offset = 34;
  optional double temp_01 = 35;
  optional double temp_02 = 36;
  optional double temp_03 = 37;
  optional double temp_04 = 38;
  optional double temp_05 = 39;
  optional double temp_06 = 40;
  optional double temp_07 = 41;
  optional double temp_08 = 42;
  optional double temp_09 = 43;
  optional double temp_10 = 44;
  optional double temp_11 = 45;
  optional double temp_12 = 46;
  optional double temp_13 = 47;
  optional double temp_14 = 48;
  optional double temp_15 = 49;
  optional double temp_16 = 50;
  optional double temp_17 = 51;
  optional double temp_18 = 52;
  optional double temp_19 = 53;
  optional double temp_20 = 54;
  optional double heading_offset = 55;
}

message SimpleMPCDebug {
  optional double lateral_error = 1;
  optional double ref_heading = 2;
  optional double heading = 3;
  optional double heading_error = 4;
  optional double heading_error_rate = 5;
  optional double lateral_error_rate = 6;
  optional double curvature = 7;
  optional double steer_angle = 8;
  optional double steer_angle_feedforward = 9;
  optional double steer_angle_lateral_contribution = 10;
  optional double steer_angle_lateral_rate_contribution = 11;
  optional double steer_angle_heading_contribution = 12;
  optional double steer_angle_heading_rate_contribution = 13;
  optional double steer_angle_feedback = 14;
  optional double steering_position = 15;
  optional double ref_speed = 16;
  optional double steer_angle_limited = 17;
  optional double station_reference = 18;
  optional double station_error = 19;
  optional double speed_reference = 20;
  optional double speed_error = 21;
  optional double acceleration_reference = 22;
  optional bool is_full_stop = 23;
  optional double station_feedback = 24;
  optional double speed_feedback = 25;
  optional double acceleration_cmd_closeloop = 26;
  optional double acceleration_cmd = 27;
  optional double acceleration_lookup = 28;
  optional double speed_lookup = 29;
  optional double calibration_value = 30;
  optional double steer_unconstrained_control_diff = 31;
  optional double steer_angle_feedforward_compensation = 32;
  repeated double matrix_q_updated = 33; // matrix_q_updated_ size = 6
  repeated double matrix_r_updated = 34; // matrix_r_updated_ size = 2

  // time derivative of lateral error rate, in m/s^2
  optional double lateral_acceleration = 35;
  // second time derivative of lateral error rate, in m/s^3
  optional double lateral_jerk = 36;

  optional double ref_heading_rate = 37;
  optional double heading_rate = 38;

  // heading_acceleration, as known as yaw acceleration, is the time derivative
  // of heading rate,  in rad/s^2
  optional double ref_heading_acceleration = 39;
  optional double heading_acceleration = 40;
  optional double heading_error_acceleration = 41;

  // heading_jerk, as known as yaw jerk, is the second time derivative of
  // heading rate, in rad/s^3
  optional double ref_heading_jerk = 42;
  optional double heading_jerk = 43;
  optional double heading_error_jerk = 44;

  optional double acceleration_feedback = 45;
  optional double acceleration_error = 46;
  optional double jerk_reference = 47;
  optional double jerk_feedback = 48;
  optional double jerk_error = 49;
  optional double steer_offset = 50;
  optional double temp_01 = 51;
  optional double temp_02 = 52;
  optional double temp_03 = 53;
  optional double temp_04 = 54;
  optional double temp_05 = 55;
  optional double temp_06 = 56;
  optional double temp_07 = 57;
  optional double temp_08 = 58;
  optional double temp_09 = 59;
  optional double temp_10 = 60;
  optional double temp_11 = 61;
  optional double temp_12 = 62;
  optional double temp_13 = 63;
  optional double temp_14 = 64;
  optional double temp_15 = 65;
  optional double temp_16 = 66;
  optional double temp_17 = 67;
  optional double temp_18 = 68;
  optional double temp_19 = 69;
  optional double temp_20 = 70;
  repeated apollo.common.PathPoint reference_state = 71;
  repeated apollo.common.PathPoint calculate_state = 72;
  repeated double control_cmd_calculate = 73;
  optional double heading_offset = 74;
}

message MracDebug {
  optional int32 mrac_model_order = 1;
  repeated double mrac_reference_state = 2;
  repeated double mrac_state_error = 3;
  optional MracAdaptiveGain mrac_adaptive_gain = 4;
  optional int32 mrac_reference_saturation_status = 5;
  optional int32 mrac_control_saturation_status = 6;
}

message MracAdaptiveGain {
  repeated double state_adaptive_gain = 1;
  repeated double input_adaptive_gain = 2;
  repeated double nonlinear_adaptive_gain = 3;
}

message Debug {
  optional SimpleLongitudinalDebug simple_lon_debug = 1;
  optional SimpleLateralDebug simple_lat_debug = 2;
  optional InputDebug input_debug = 3;
  optional SimpleMPCDebug simple_mpc_debug = 4;
}

message MbdPoseCalcDebug {
  optional double posecalc_posedata_timestamp = 1;
  optional bool posecalc_inputdata_valid = 2;
  optional double posedata_world_pos_x = 3;
  optional double posedata_world_pos_y = 4;
  optional float posedata_vrf_vel_x = 5;
  optional float posedata_vrf_vel_y = 6;
  optional float posedata_vrf_acc_x = 7;
  optional float posedata_vrf_acc_y = 8;
  optional float posedata_world_heading = 9;
  optional float posedata_vrf_yawrate = 10;
  optional double posecalc_world_pos_x = 11;
  optional double posecalc_world_pos_y = 12;
  optional float posecalc_vrf_vel_x = 13;
  optional float posecalc_vrf_vel_y = 14;
  optional float posecalc_world_vel_x = 15;
  optional float posecalc_world_vel_y = 16;
  optional float posecalc_world_acc_x = 17;
  optional float posecalc_world_acc_y = 18;
  optional float posecalc_world_heading = 19;
  optional float posecalc_world_pitch = 20;
  optional float posecalc_timedelay = 21;
  optional float posecalc_enable = 22;
  optional uint32 global_time_timestamp_sec = 23;
  optional uint32 global_time_timestamp_nec = 24;
  optional uint32 global_time_gettime_enable = 25;

}

message MbdTrajCalcDebug {
  optional bool trajCalc_trajdata_replaning_flag = 1;
  optional uint32 trajcalc_trajdata_estop = 2;
  optional uint32 trajcalc_trajdata_gearcmd = 3;

  optional uint32 trajcalc_inputdata_valid = 4;
  optional double trajcalc_trajdata_timestamp = 5;
  optional double trajcalc_globaltime_timestamp = 6;
  optional bool trajcalc_trajdata_pointtime_check = 7;
  optional bool trajcalc_trajdata_timecheck = 8;
  optional uint32 trajcalc_enable = 9;

  optional uint32 trajcalc_lon_startpoint_index = 10;
  optional double trajcalc_lon_startpoint_time = 11;
  optional float trajcalc_lon_linear_ratio = 12;
  optional float trajcalc_lon_match_pointx = 13;
  optional float trajcalc_lon_match_pointy = 14;
  optional float trajcalc_lon_poserrcmd = 15;
  optional float trajcalc_lon_headingcmd = 16;
  optional float trajcalc_lon_velcmd = 17;
  optional float trajcalc_lon_acc_cmd = 18;
  optional float trajcalc_lon_curvcmd = 19;

  optional uint32 trajcalc_lonpre_startpoint_index = 20;
  optional double trajcalc_lonpre_startpoint_time = 21;
  optional float trajcalc_lonpre_linear_ratio = 22;
  optional float trajcalc_lonpre_match_pointx = 23;
  optional float trajcalc_lonpre_match_pointy = 24;
  optional float trajcalc_lonpre_poserrcmd = 25;
  optional float trajcalc_lonpre_headingcmd = 26;
  optional float trajcalc_lonpre_velcmd = 27;
  optional float trajcalc_lonpre_acc_cmd = 28;
  optional float trajcalc_lonpre_curvrmd = 29;

  optional double trajcalc_posedata_posex = 30;
  optional double trajcalc_posedata_posey = 31;
  optional float trajcalc_lat_Dot_fstpoint2veh = 32;
  optional float trajcalc_lat_Dot_endpoint2veh = 33;
  optional uint32 trajcalc_lat_matchpoint_vase = 34;
  optional uint32 trajcalc_lat_startpoint_index = 35;
  optional float trajcalc_lat_linear_ratio = 36;
  optional float trajcalc_lat_match_pointx = 37;
  optional float trajcalc_lat_match_pointy = 38;
  optional float trajcalc_lat_poserrcmd = 39;
  optional float trajcalc_lat_headingcmd = 40;
  optional float trajcalc_lat_velcmd = 41;
  optional float trajcalc_lat_acc_cmd = 42;
  optional float trajcalc_lat_curvcmd = 43;

  optional double trajcalc_posedata_preposex = 44;
  optional double trajcalc_posedata_preposey = 45;
  optional float trajcalc_latpre_dot_fstpoint2veh = 46;
  optional float trajcalc_latpre_dot_endpoint2veh = 47;
  optional uint32 trajcalc_latpre_matchpoint_vase = 48;
  optional uint32 trajcalc_latpre_startpoint_index = 49;
  optional float trajcalc_latpre_linear_ratio = 50;
  optional float trajcalc_latpre_match_pointx = 51;
  optional float trajcalc_latpre_match_pointy = 52;
  optional float trajcalc_latpre_poserrcmd = 53;
  optional float trajcalc_latpre_headingcmd = 54;
  optional float trajcalc_latpre_velcmd = 55;
  optional float trajcalc_latpre_acc_cmd = 56;
  optional float trajcalc_latpre_curvcmd = 57;
}

message MbdCtrlDecDebug {
  optional uint32 ctrldec_sysmode = 1;
  optional bool ctrldec_req_auto = 2;

  optional bool ctrldec_automode_is_estop = 3;
  optional bool ctrldec_is_gear_change_req = 4;
  optional bool ctrldec_is_stop_steer_ctrl = 5;
  optional bool ctrldec_is_vehicle_standstill = 6;
  optional bool ctrldec_is_steer_set_ok = 7;

  optional uint32 ctrldec_lat_sysmodecmd = 8;
  optional uint32 ctrldec_lat_resetflag = 9;
  optional float ctrldec_lat_sys_poserr = 10;
  optional float ctrldec_lat_sys_yawff = 11;
  optional float ctrldec_lat_sys_velff = 12;
  optional float ctrldec_lat_sys_curvff = 13;
  optional float ctrldec_lat_api_poscmd = 14;
  optional float ctrldec_lat_api_yawcmd = 15;
  optional float ctrldec_lat_api_curvcmd = 16;
  optional float ctrldec_lat_api_steercmd = 17;

  optional uint32 ctrldec_lon_sysmodecmd = 18;
  optional uint32 ctrldec_lon_resetflag = 19;
  optional float ctrldec_lon_sys_poserr = 20;
  optional float ctrldec_lon_sys_velff = 21;
  optional float ctrldec_lon_sys_accff = 22;
  optional uint32 ctrldec_lon_sys_gearcmd = 23;
  optional uint32 ctrldec_lon_sys_gear_ena = 24;
  optional uint32 ctrldec_lon_sys_brk_emerg = 25;
  optional float ctrldec_lon_api_poscmd = 26;
  optional float ctrldec_lon_api_velff = 27;
  optional float ctrldec_lon_api_acc_cmd = 28;
  optional float ctrldec_lon_api_thrcmd = 29;
  optional float ctrldec_lon_api_brkcmd = 30;
}

message MbdLonCtrlDebug {
  optional LonCtrlLoop lonctrl_modecmd = 1;
  optional uint32 lonctrl_resetflag = 2;

  optional float lonctrl_sys_poserr = 3;
  optional float lonctrl_sys_velff = 4;
  optional float lonctrl_sys_accff = 5;
  optional uint32 lonctrl_sys_gearcmd = 6;
  optional uint32 lonctrl_sys_gearena = 7;
  optional uint32 lonctrl_sys_brkemerg = 8;
  optional uint32 lonctrl_api_poscmd = 9;
  optional uint32 lonctrl_api_velcmd = 10;
  optional uint32 lonctrl_api_acccmd = 11;
  optional uint32 lonctrl_api_thrcmd = 12;
  optional uint32 lonctrl_api_brkcmd = 13;

  optional float lonctrl_fdbk_vx = 14;
  optional float lonctrl_fdbk_ax = 15;
  optional float lonctrl_fdbk_pitch = 16;
  optional float lonctrl_fdbk_gear = 17;
  optional float lonctrl_fdbk_reverse = 18;

  optional float lonctrl_pos_dyn = 19;
  optional float lonctrl_posctrl_p = 20;
  optional float lonctrl_pos_poserr_filter = 21;
  optional float lonctrl_pos_pi_velcmd = 22;
  optional float lonctrl_pos_output_velcmd = 23;

  optional float lonctrl_vel_dyn = 24;
  optional float lonctrl_vel_velcmd_lmt = 25;
  optional float lonctrl_vel_vel_err = 26;
  optional float lonctrl_velctrl_p = 27;
  optional float lonctrl_velctrl_i = 28;
  optional float lonctrl_vel_pi_acc_cmd = 29;
  optional float lonctrl_vel_pi_acccmd_filter = 30;
  optional float lonctrl_vel_accpitch = 31;
  optional float lonctrl_vel_accdamper = 32;
  optional float lonctrl_vel_accff_filter = 33;
  optional float lonctrl_vel_output_accCmd = 34;
  optional float lonctrl_vel_output_accCmd_filter = 35;

  optional float lonctrl_thrust_thr_dyn = 36;
  optional float lonctrl_thrust_thr_accerr = 37;
  optional float lonctrl_thrust_brk_dyn = 38;
  optional float lonctrl_thrust_brk_accerr = 39;
  optional float lonctrl_thrust_fdbk_ax_filter = 40;
  optional float lonctrl_thrust_thr_acc_cmd_filter = 41;
  optional float lonctrl_thrust_brk_acc_cmd_filter = 42;
  optional float lonctrl_thrustctrl_thr_p = 43;
  optional float lonctrl_thrustctrl_thr_i = 44;
  optional float lonctrl_thrustctrl_brk_p = 45;
  optional float lonctrl_thrustctrl_brk_i = 46;
  optional float lonctrl_thrust_pi_thr_acc_cmd = 47;
  optional float lonctrl_thrust_pi_brk_acc_cmd = 48;
  optional float lonctrl_thrust_acc_cmd_filter_lmt = 49;
  optional float lonctrl_thrust_acctothr_gain = 50;
  optional float lonctrl_thrust_throut_throcmd = 51;
  optional float lonctrl_thrust_acctobrk_gain = 52;
  optional float lonctrl_thrust_brkout_brkcmd = 53;

  optional float lonctrl_analog_autput_throtcmd = 54;
  optional float lonctrl_analog_autput_brkcmd = 55;
}

message MbdLatCtrlDebug {
  optional LatCtrlLoop latctrl_modecmd = 1;
  optional uint32 latctrl_resetflag = 2;

  optional float latctrl_sys_poserr = 3;
  optional float latctrl_sys_yawff = 4;
  optional float latctrl_sys_velff = 5;
  optional float latctrl_sys_curvff = 6;
  optional float latctrl_api_poscmd = 7;
  optional float latctrl_api_yawcmd = 8;
  optional float latctrl_api_curvcmd = 9;
  optional float latctrl_api_steercmd = 10;

  optional float latictrl_fdbk_vxb = 11;
  optional float latictrl_fdbk_heading = 12;
  optional float latictrl_fdbk_yawrate = 13;
  optional float latictrl_fdbk_steer = 14;
  optional uint32 latictrl_fdbk_gear = 15;
  optional uint32 latictrl_fdbk_rvsflag = 16;

  optional float latictrl_offset_dyn = 17;
  optional float latictrl_offsetctrl_i = 24;
  optional float latictrl_offsetctrl_p = 25;
  optional float latictrl_offset_offseterr = 18;
  optional float latictrl_offset_pi_torscmd = 19;
  optional float latictrl_offset_torsrateffcmd = 20;
  optional float latictrl_offset_output_yawcmd = 21;

  optional float latictrl_tors_dyn = 26;
  optional float latictrl_tors_yawerr = 27;
  optional float latictrl_yawctrl_p = 28;
  optional float latictrl_yawctrl_i = 29;
  optional float latictrl_tors_pi_torsrate = 30;
  optional float latictrl_tors_pi_leadfilter_torsrate = 31;
  optional float latictrl_tors_torsrateff = 32;
  optional float latictrl_tors_output_yawratecmd = 33;

  optional float latictrl_rate_dyn = 34;
  optional float latictrl_rate_p = 35;
  optional float latictrl_rate_i = 36;
  optional float latictrl_rate_yawratecmd_lmt = 37;
  optional float latictrl_rate_filter_yawratecmd_lmt = 38;
  optional float latictrl_rate_pi_steer = 39;
  optional float latictrl_rate_pi_filter_steer = 40;
  optional float latictrl_rate_steerff = 41;
  optional float latictrl_rate_output_front_steercmd = 42;
  optional float latictrl_rate_output_sw_steercmd = 43;

  optional float latictrl_steer_steercmd_filter = 44;
  optional float latictrl_steer_max_steerrate_value = 45;
  optional float latictrl_steer_steercmd_lmt_filter = 46;
  optional float latictrl_steer_output_steercmd = 47;
  optional float latictrl_steer_steertorque_initial = 48;
  optional float latictrl_steer_steertorque_cmd = 49;

  optional float latictrl_tors_pure_yawerr = 50;
  optional float latictrl_rate_output_front_steercmd_offset = 51;
  optional float latictrl_steer_steer_err =52;

}

message MbdCtrlOutputDebug {
  optional float brake_cmd = 1;
  optional float throttle_cmd = 2;
  optional float acc_cmd = 3;
  optional uint32 gear_enable = 4;
  optional uint32 gear_cmd = 5;
  optional uint32 emerg_enable = 6;
  optional float steer_cmd = 7;
  optional float steer_torque_cmd = 8;
}

message MbdDebug {
  optional MbdPoseCalcDebug pose_calc_debug = 1;
  optional MbdTrajCalcDebug traj_calc_debug = 2;
  optional MbdCtrlDecDebug ctrl_dec_debug = 3;
  optional MbdLonCtrlDebug lon_ctrl_debug = 4;
  optional MbdLatCtrlDebug lat_ctrl_debug = 5;
  optional MbdCtrlOutputDebug ctrl_output_debug = 6;
}
